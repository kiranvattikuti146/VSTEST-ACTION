name: VSTest Reusable Workflow

on:
  workflow_call:
    inputs:
      runsOn:
        required: true
        type: string
      dotnet-version:
        required: true
        type: string
      testSelector:
        required: true
        type: string
        default: "testAssemblies" # Default to testAssemblies
      testAssemblyVer2:
        required: true
        type: string # Required when testSelector = testAssemblies
      configuration:
        required: true
        type: string
      platform:
        required: false
        type: string
      code-coverage-enabled:
        required: false
        type: boolean
      test-run-title:
        required: false
        type: string
      run-in-parallel:
        required: false
        type: boolean
      testPlan:
        required: false
        type: string
      testSuite:
        required: false
        type: string
      testConfiguration:
        required: false
        type: string
      tcmTestRun:
        required: false
        type: string
      uiTests:
        required: false
        type: boolean
        default: false
      vsTestVersion:
        required: false
        type: string
      vstestLocation:
        required: false
        type: string
      diagnosticsEnabled:
        required: false
        type: boolean
      rerunFailedTests:
        required: false
        type: boolean
      rerunType:
        required: false
        type: string
      rerunMaxAttempts:
        required: false
        type: string
      dontDistribute:
        required: false
        type: boolean
      searchFolder:
        required: true
        type: string
      resultsFolder: # New input
        required: false
        type: string
        default: "$(Agent.TempDirectory)TestResults"
      testFiltercriteria: # New input
        required: false
        type: string
      runOnlyImpactedTests: # New input
        required: false
        type: boolean
        default: false
      runAllTestsAfterXBuilds: # New input
        required: false
        type: string
        default: "50"

jobs:
  run-tests:
    runs-on: ${{ inputs.runsOn }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration ${{ inputs.configuration }} --no-restore

      - name: Debug Directory Structure
        shell: pwsh
        run: |
          # Debug: List all files in the working directory
          $workingDirectory = "${{ github.workspace }}"
          Set-Location -Path $workingDirectory
          Write-Host "Listing all files in the working directory:"
          Get-ChildItem -Path $workingDirectory -Recurse | ForEach-Object { Write-Host $_.FullName }

      - name: Run tests with Visual Studio Test Runner
        shell: pwsh
        run: |
          # Ensure the correct working directory
          $workingDirectory = "${{ inputs.searchFolder }}"
          Set-Location -Path $workingDirectory

          # Check if testSelector is testAssemblies
          if ("${{ inputs.testSelector }}" -eq "testAssemblies") {
            # Resolve test assemblies from the bin directory
            $testAssemblies = Get-ChildItem -Path $workingDirectory -Recurse -File | Where-Object { $_.FullName -match "bin/.+/Release/.*${{ inputs.testAssemblyVer2 }}" } | ForEach-Object { $_.FullName }
            if (-not $testAssemblies) {
              Write-Error "No test assemblies found matching the pattern '${{ inputs.testAssemblyVer2 }}'."
              exit 1
            }

            # Debug: List resolved test assemblies
            Write-Host "Resolved test assemblies:"
            $testAssemblies | ForEach-Object { Write-Host $_ }

            # Construct VSTest arguments
            $vstestArgs = @()
            if (${{ inputs.code-coverage-enabled }}) { $vstestArgs += '/EnableCodeCoverage' }
            if (${{ inputs.run-in-parallel }}) { $vstestArgs += '/Parallel' }
            if (${{ inputs.diagnosticsEnabled }}) { $vstestArgs += '/Diag:logfile.txt' }
            if (${{ inputs.rerunFailedTests }}) { $vstestArgs += "/Rerun:${{ inputs.rerunType }}" }
            if (-not [string]::IsNullOrEmpty("${{ inputs.testFiltercriteria }}")) { $vstestArgs += "/TestCaseFilter:${{ inputs.testFiltercriteria }}" }
            if (${{ inputs.runOnlyImpactedTests }}) { 
              $vstestArgs += "/ImpactedTests"
              $vstestArgs += "/RunAllTestsAfter:${{ inputs.runAllTestsAfterXBuilds }}"
            }
            if (${{ inputs.uiTests }}) { $vstestArgs += "/UITests" }

            # Run VSTest for each resolved test assembly
            foreach ($testAssembly in $testAssemblies) {
              $command = "${{ inputs.vstestLocation }} `"$testAssembly`" /Settings:TestSettings.runsettings /ResultsDirectory:${{ inputs.resultsFolder }} $($vstestArgs -join ' ')"
              Write-Host "Executing: $command"
              Invoke-Expression $command
            }
          } else {
            Write-Error "Unsupported testSelector '${{ inputs.testSelector }}'. Only 'testAssemblies' is supported in this workflow."
            exit 1
          }
